<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://CarryCKW.github.io</id>
    <title>Great Perheps</title>
    <updated>2021-01-20T00:32:09.821Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://CarryCKW.github.io"/>
    <link rel="self" href="https://CarryCKW.github.io/atom.xml"/>
    <subtitle>Take a break, write some code, and do what you do best.</subtitle>
    <logo>https://CarryCKW.github.io/images/avatar.png</logo>
    <icon>https://CarryCKW.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Great Perheps</rights>
    <entry>
        <title type="html"><![CDATA[Web后端个人感想]]></title>
        <id>https://CarryCKW.github.io/PXtuH0e1n/</id>
        <link href="https://CarryCKW.github.io/PXtuH0e1n/">
        </link>
        <updated>2020-12-30T13:35:10.000Z</updated>
        <content type="html"><![CDATA[<p>小记：<br>
不得不承认，最开始接触web后端开发是课内开设了这门课，而上课的老师依旧用着古老的技术，一开始推荐的《Tomcat与Java Web技术详解》一书，说实话，自己是那种不会跟着课程进度学的人，所以第一周课快结束的时候我就大概做出来几个简单的页面跳转加一下简易的数据处理，很快我意识到这一周的开发时间在真正有用的业务逻辑上花的时间占比很少，总是在配置，配置，当然自己的迫切使得自己放弃了生命周期的话题的深入。</p>
<pre><code>    自己感受到需要一种更为快速的方式，此时不禁脑海中映出《Spring实战》中关于MVC的介绍，自己恶补了Spring从IoC到DI，再真正进入MVC的世界，当遇见注解配置的时候不禁觉得很方便（殊不知框架通过反射和代理给了捷径），就像很多书虫一样，知识获取的速度只受自己理解快慢的影响，很快通过spring方便的配置(写下了刻板的/config, /controller, /model, /service, /dao ... ... 的分类)和Java代码风格的JSP完成了第一个课程设计作业，名为CatFound，简单的查询数据库和显示的案例，那时候心中还有点沾沾自喜。

    就这样当第二个课程作业来领的时候，熟练的配置和整理请求映射，并且将HTML页面改成JSP，不过这次让我困扰的是页面变多，并且前后端变量的强耦合，让我身心疲惫，就像是新鲜感慢慢被吞噬了，并且对于权限校验也比较野蛮.

    第三次面对的不再是作业,而是给另一半和自己的交代,它更像是个人相册,不过开始写之前自己不再是那个因为写出效果而沾沾自喜的男孩,此时是拥抱SpringBoot的时刻,不过没有过多依赖它的方便,需要Bean还是自己显示配置,毕竟在走路的时候就不应该坐火箭,只是借用别人的鞋子走自己的路罢了(略有五十步笑百步的讽刺),过程中反而觉得前端三剑客搭配的优美,配合jQuery,尽可能的前后端分离,只是多出来的思考,比如页面的授权(如何避免Redis使用过程中同一账号多处登录的Token强制过期问题), 通过面向切面实现和自定义注解实现请求拦截(查看用户Token或者更新前端新增信息而非全量查表来优化异步刷新), 再或者是对于DB表的设计优化,应该最为深入思考的开始.

    可是奠基的基础技术没怎么变过,只是封装的更方便罢了,毕竟C++也可以像Java一样.
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[近日感想]]></title>
        <id>https://CarryCKW.github.io/7tvxcyHGx/</id>
        <link href="https://CarryCKW.github.io/7tvxcyHGx/">
        </link>
        <updated>2020-09-14T03:41:41.000Z</updated>
        <content type="html"><![CDATA[<p>能够和这两个同学组队估计是这段时间来最幸运的事了叭，其实我还是很享受这段游戏体验的，果然一群人一起努力比一个人孤军奋战有意思，不由得想到在计科院居然只找到一两人和我讨论讨论技术或者生活感想，还是志同道合的人难找啊！<br>
和他们这段时间的思维碰撞还是让我回想起那句让人为之一颤的话，没有数学思维的Coder只能固步自封，在写完这几行代码后我尽然没有多少成就感，并不是说难度不高，而是当我回看我写好的代码时不愿面对的现实，代码风格着实是一大原因，功能划分也有模糊的界限，以导致糟糕的观赏体验，或许结果不需要太在乎过程，但这不是我接受的；又或许我正在远离数学的道路上越走越远，希望不会发生叭。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM运行时数据区域]]></title>
        <id>https://CarryCKW.github.io/eiF1-qK28/</id>
        <link href="https://CarryCKW.github.io/eiF1-qK28/">
        </link>
        <updated>2020-05-25T08:20:51.000Z</updated>
        <summary type="html"><![CDATA[<p>1.总体上，JVM所管理的内存将会包括以下几个部分。<br>
<img src="https://CarryCKW.github.io/post-images/1590399408791.svg" alt="" loading="lazy"><br>
那么接下来对他们详细的讲述，以备今后之需😄。</p>
]]></summary>
        <content type="html"><![CDATA[<p>1.总体上，JVM所管理的内存将会包括以下几个部分。<br>
<img src="https://CarryCKW.github.io/post-images/1590399408791.svg" alt="" loading="lazy"><br>
那么接下来对他们详细的讲述，以备今后之需😄。</p>
<!-- more -->
<h1 id="21程序计数器">2.1<strong>程序计数器</strong></h1>
<p>程序计数器可以看作是当前线程所执行的字节码的行号计数器，而计数器本身的值通过被字节码解释器改变，以此来选取下一条需要执行的字节码指令。<br>
由于Java虚拟机的多线程是通过线程轮流切换、分配处理器执行时间的方式实现的，在任何一个确定的时间点上，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了能够在多线程切换中能够恢复到上一次正确的位置，每个线程都会有属于自己的独有的程序计数器，并且各线程的PC互不影响，我们称这类内存为“线程私有”的内存。</p>
<!-- more -->
<h1 id="22java虚拟机栈">2.2<strong>Java虚拟机栈</strong></h1>
<p>虚拟机栈描述的是Java方法执行的线程内存模型。每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个方法被调用到执行结束的过程中，都伴随着栈帧在虚拟机栈的出栈，入栈。其生命周期和线程一样。<br>
对于程序员来说，比较关心的是“堆”和“栈”，一般来说栈指的是这里的虚拟机栈，更多情况下是虚拟机栈中局部变量表部分。<br>
局部变量表中存放了编译器可知的Java虚拟机基本数据类型（char, int, boolen...)、对象引用(reference类型，它不同于对象本身，可能是指向对象起始地址的指针，也可能是代表对象的句柄) 和 returnAddress类型(指向一条字节码指令的地址)。而这些数据在局部标量表中存储空间以局部变量槽(Slot)来表示，并且数据本身的大小决定了Slot占据的数量。进入一个方法后，在方法需要在栈帧中占多大的局部变量空间在编译期间就可以确定，并且在运行时不会改变局部变量表的大小(这里的大小指变量槽的数量)。<br>
对于此内存区域的两类异常状况：</p>
<ul>
<li>StackOverflowError: 如果线程请求的栈深度大于虚拟机允许的最大深度。</li>
<li>OutOfMenoryError(OOM): 如果虚拟机允许栈容量动态扩展，那么当栈扩展无法申请到足够的内存则抛出。</li>
</ul>
<!-- more -->
<h1 id="23本地方法栈">2.3<strong>本地方法栈</strong></h1>
<p>本地方法栈和虚拟机栈的作用跟相似，虚拟机栈为虚拟机执行的Java方法服务，而本地方法栈为虚拟机使用到本地方法服务。根据不同的虚拟机实现，可能将本地方法栈和虚拟机栈合并(如Spot)，本地方法栈也会在响应的时候抛出和虚拟机栈一样类型的错误。</p>
<!-- more -->
<h1 id="24java堆">2.4<strong>Java堆</strong></h1>
<p>如图中所示的，Java堆是所有线程共享的内存区域，在虚拟机启动时创建。此内存区域的唯一目的是存放对象实例，几乎所有的对象实例在这里分配内存。(当然，随着即时编译技术的进步，比如逃逸分析技术的日渐强大，栈上分配、标量替换使得Java对象必须在Heap上分配内存变得不是那么绝对。)<br>
Java堆存储内容的共性是，无论哪个区域，存储的都是对象的实例，有些将Java堆进行例如“新生代、老年代、永久代......”这样的划分，只是为了更好的回收内存，或者更快速得分配内存，这里暂不讨论GC或者分配的细节。</p>
<!-- more -->
<h1 id="25方法区">2.5<strong>方法区</strong></h1>
<p>作为各个线程共享的内存区域，其用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。当然《Java虚拟机规范》对方法区的约束比较宽松，和Java堆一样不需要连续的内存空间和可以选择固定大小或者可扩展。对于这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载；同样，如果在方法区无法满足新的分配内存需求，将会抛出OOM异常。</p>
<!-- more -->
<h1 id="26运行时常量池">2.6<strong>运行时常量池</strong></h1>
<p>运行时常量池是方法区的一部分。Class文件除了包含类的版本、字段、方法、接口等描述信息，还有常量池表(Constant Pool Table)，用于存放编译期间各种生成的字面量于符号引用，而这部分内容将在类加载后存放到方法区的运行时常量池中。<br>
运行时常量池也具备动态性，也就是说，并非预置入Class文件的常量池的内容才能进入方法区运行时常量池，运行时也可以将新的常量放入池中。<br>
同样，如果收到方法去内存的限制，抛出OOM异常。</p>
<!-- more -->
<p>——本内容来自于《Java深入理解》-Java内存区域，以上为个人总结。</p>
]]></content>
    </entry>
</feed>